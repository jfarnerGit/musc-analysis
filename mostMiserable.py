from lyricProcessing import *
from lyricFetching import *
from calcSentiment import *
import matplotlib.pyplot as plt

"""
Demo of some music analysis tools - tries to find the most miserable outlaw
Compare sentiment averages for a list of artists - returns plot comparing percentage negative to percentage positive
songs of a given artist.
"""



#Change artist list here! Make sure that artist has corresponding CSV generated by lyricFetching.py
#artists = ['Alan Jackson', 'Bob Dylan', 'Charley Pride', 'Gene Autry', 'George Jones', 'Guy Clark', 'Hank Williams', 'Johnny Cash', 'Kris Kristofferson','Martina McBride', 'Merle Haggard', 'Patsy Cline', 'The Highwaymen', 'Townes Van Zandt', 'Waylon Jennings', 'Willie Nelson']
artists = ['Alan Jackson', 'Billy Joe Shaver', 'David Allan Coe', 'Charley Pride', 'Gene Autry', 'Jessi Colter', 'Hank Williams', 'Hank Williams Jr', 'Johnny Cash', 'Kris Kristofferson', 'Martina Mcbride', 'Merle Haggard', 'Shooter Jennings', 'Steve Earle', 'The Highwaymen', 'Tom T Hall', 'Townes Van Zandt', 'Waylon Jennings', 'Willie Nelson']

#Counts sentiment scores from each artist's dataframe and constructs new dataframe compiling counts
def create_sentiment_df(artists):
    sentiment_df = pd.DataFrame(columns = ('artist', 'pos', 'neu', 'neg'))
    for artist in artists:
        df = pd.read_csv(artist_to_csv(artist))
        clean_and_tokenize(df)
        calc_sentiment(df)
        artist = df['artist'][1]
        #need try/except to handle pd KeyError when class count = 0 (DAC has no positive songs and kept breaking things)
        try:
            pos = df.emotion_class.value_counts().loc[1.0]
        except:
            pos = 0
        try:
            neu = df.emotion_class.value_counts().loc[0.5]
        except:
            neu = 0
        try:
            neg = df.emotion_class.value_counts().loc[-1.0]
        except:
            neg = 0
        new_row = pd.Series(data={'artist': artist, 'pos': pos, 'neu': neu, 'neg': neg}, name = 'x')
        sentiment_df = sentiment_df.append(new_row, ignore_index=True)
        string = 'Added Artist: ' + artist + '\n'
        print(colored(string, 'green'))
        #sentiment_df['percent_neg'] = sentiment_df[neg/50 * 100]

    return sentiment_df

sentiment_df = (create_sentiment_df(artists))

#Sort by highest number of negative and lowest number of positive
sentiment_df = sentiment_df.sort_values(by = ['neg', 'pos'], ascending=[False, True])



x = sentiment_df['artist']

#50 total so just multiply by 2 to get percentage - otherwise just divide by length of dataset and multiply by 100
negp = (sentiment_df['neg']) * 2
posp = (sentiment_df['pos']) * 2

print(sentiment_df)




fig = plt.bar(x, negp, width = 0.8, label = 'Percent Negative', color = 'royalblue')
fig = plt.bar(x, posp, width = 0.8, label = 'Percent Positive', color = 'lightsteelblue', bottom = negp)

#fig = plt.bar(x, negp, width = 0.8, label = 'Percent Negative', color = 'lightseagreen')
#fig = plt.bar(x, posp, width = 0.8, label = 'Percent Positive', color = 'turquoise', bottom = negp)


fmt = '%.0f%%' # Formatting for plot axes marks



import matplotlib.ticker as mtick

axes = plt.gca()
axes.set_ylim([0, 60])

plt.xlabel("Outlaws", fontweight = 'bold')
plt.ylabel('Percentage of Work Deemed Negative', fontweight = 'bold')
plt.legend(loc = 'upper right')
plt.title("Most Miserable Outlaws", fontweight = 'bold')
plt.subplots_adjust(bottom=.3) #so names don't cut off
plt.setp(plt.gca().get_xticklabels(), rotation='vertical', horizontalalignment='right')


plt.show()

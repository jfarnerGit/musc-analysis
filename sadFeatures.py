import pandas as pd
from termcolor import colored
import matplotlib.pyplot as plt
from matplotlib import rc
import numpy as np

'''
Plot average acoustic features from Spotify for each artist in List. For demo, only plots avg energy and avg valence
'''

#Make sure that each artist has corresponding CSV generated by lyricFetching.py
artists = ['Alan Jackson', 'Billy Joe Shaver', 'David Allan Coe', 'Charley Pride', 'Gene Autry', 'Jessi Colter', 'Hank Williams Jr', 'Kris Kristofferson', 'Martina Mcbride', 'Merle Haggard', 'Shooter Jennings', 'Steve Earle', 'The Highwaymen', 'Tom T Hall', 'Townes Van Zandt', 'Waylon Jennings']

#Function to get name of csv file for each artist in list
def artist_to_feature_csv(artist_name):
    artist_name_clean = artist_name.replace(' ', '')
    artist_name_clean = artist_name_clean.lower()
    csv_name = artist_name_clean + '_features' + '.csv'
    return csv_name

#Get average from each artist dataframe and create new dataframe
def create_avg_feature_df(artists):
    avg_feature_df = pd.DataFrame(columns = ('artist', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'liveness', 'loudness', 'speechiness', 'tempo', 'valence', 'popularity'))
    for artist in artists:
        df = pd.read_csv(artist_to_feature_csv(artist))
        av_column = df.mean(axis = 0)
        acousticness = av_column[2]
        danceability = av_column[3]
        energy = av_column[4]
        instrumentalness = av_column[5]
        liveness  = av_column[6]
        loudness = av_column[7]
        speechiness = av_column[8]
        tempo = av_column[9]
        valence = av_column[10]
        popularity = av_column[11]

        new_row = pd.Series(data={'artist': artist, 'acousticness': acousticness, 'danceability': danceability, 'energy': energy, 'instrumentalness': instrumentalness, 'liveness': liveness, 'loudness': loudness, 'speechiness': speechiness, 'tempo': tempo, 'valence': valence, 'popularity': popularity}, name = 'x')
        avg_feature_df = avg_feature_df.append(new_row, ignore_index=True)
        string = 'Added Artist: ' + artist + '\n'
        print(colored(string, 'green'))
    return avg_feature_df


avg_feature_df = create_avg_feature_df(artists)

#sort by valence and then energy
avg_feature_df_sorted = avg_feature_df.sort_values(by = ['valence', 'energy'], ascending=[True, True])

print(avg_feature_df[['artist', 'valence', 'energy']])


#Plot adjacent bars for each artist

x = np.arange(18)
#x = len(avg_feature_df_sorted['artist'])
ax1 = plt.subplot(1,1,1)
w = 0.3
axes = plt.gca()
#axes.set_ylim([0, 1])
#axes.set_ylim([0,1])
#plt.xticks(), will label the bars on x axis with the respective country names.
plt.xticks(x + w /2, avg_feature_df_sorted['artist'], rotation='vertical')
valence =ax1.bar(x, avg_feature_df_sorted['valence'], width=w, color='royalblue', align='center')
#The trick is to use two different axes that share the same x axis, we have used ax1.twinx() method.
ax2 = ax1.twinx()
#We have calculated GDP by dividing gdpPerCapita to population.
energy =ax2.bar(x + w, avg_feature_df_sorted['energy'], width=w,color='lightsteelblue',align='center')
#Set the Y axis label as GDP.
plt.ylabel('Average Across Discography')
#To set the legend on the plot we have used plt.legend()
plt.legend([valence, energy],['Valence Avg.', 'Energy Avg'], loc = 'upper center')
#To show the plot finally we have used plt.show().
plt.subplots_adjust(bottom=.3) #so names don't cut off

plt.show()
